// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  if (!dc || !d3 || !crossfilter || !_) {
    throw 'You need to load DC, D3, Crossfilter and Underscore library';
  }

  angular.module('dcCompose', []).directive("dcCompose", function() {
    return {
      restrict: 'AC',
      scope: {
        dcCompose: '=',
        dimensions: '=',
        measures: '=',
        filter: '='
      },
      templateUrl: 'dc/compose/template.html',
      link: function($scope, element, attrs) {
        var _this = this;
        attrs.$observe('id', function(id) {
          return $scope.chartId = id ? id : 'dcComposeDefault';
        });
        $scope.height = attrs.height ? attrs.height : 150;
        $scope.$watch('dimensions', function(dim) {
          if (dim) {
            return $scope.dimFilters = dim;
          }
        });
        $scope.$watch('measures', function(measure) {
          if (measure) {
            return $scope.measureFilters = measure;
          }
        });
        $scope.$watch('dcCompose', function(dcCompose) {
          if (dcCompose) {
            $scope.create();
          }
        });
        $scope.$watch('filter', function(filter) {
          if ($scope.dcComposeChart) {
            $scope.dcComposeChart.filterAll();
            if (filter) {
              $scope.dcComposeChart.filter(filter);
            }
            return $scope.dcComposeChart.redraw();
          }
        });
        $scope.create = function() {
          $scope.dcComposeChart = dc.lineChart('#' + $scope.chartId);
          $scope.dcComposeChart.width(element.width()).height($scope.height).margins({
            top: 40,
            right: 50,
            bottom: 30,
            left: 60
          }).dimension($scope.dcCompose.dimension).group($scope.dcCompose.sum.object).x(d3.time.scale().domain([$scope.dcCompose.min, $scope.dcCompose.max])).renderArea(true).renderHorizontalGridLines(true).elasticY(true).brushOn(true).legend(dc.legend().x(element.width() - 50).y(10)).title(function(d) {
            return d.key;
          });
          angular.forEach($scope.dcCompose.stack, function(value) {
            return $scope.dcComposeChart.stack($scope.dcCompose.sum.object, value, function(d) {
              return d.value[value];
            }).valueAccessor(function(d) {
              return d.value[value];
            });
          });
          $scope.dcComposeChart.render();
        };
      }
    };
  });

}).call(this);

/*
//@ sourceMappingURL=dc-compose.map
*/
